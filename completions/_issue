#compdef issue

# Zsh completion for issue script
# Place this file in your $fpath (e.g., ~/.local/share/zsh/completions/ or /usr/local/share/zsh/site-functions/)

_issue() {
  local context state line
  typeset -A opt_args

  _arguments \
    '1: :->command' \
    '*: :->args' \
    && return 0

  case $state in
    command)
      local commands=(
        'create:Create a new note (opens editor)'
        'list:List all open issues, optionally filtering by label'
        'view:View a specific note'
        'open:Open a note in your web browser'
        'edit:Edit a specific note'
        'comment:Add a comment to a specific note'
        'close:Close a specific note'
        'closeWithCommit:Commit all changes and close a selected issue'
      )
      _describe 'commands' commands
      ;;
    args)
      case $line[1] in
        list)
          # For list command, provide label completion
          _issue_labels
          ;;
        view|open|edit|comment|close)
          # For commands that take issue numbers, provide issue number completion
          _issue_numbers
          ;;
        create|closeWithCommit)
          # These commands don't take arguments
          ;;
      esac
      ;;
  esac
}

# Function to complete issue numbers
_issue_numbers() {
  local issues
  local issue_list
  
  # Check if we're in a git repository and have gh CLI available
  if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    return 1
  fi
  
  if ! command -v gh >/dev/null 2>&1; then
    return 1
  fi
  
  # Get issue numbers and titles for completion
  # Using the same approach as the script with --limit 1000
  issue_list=$(gh issue list --state open --json number,title --limit 1000 2>/dev/null | \
    jq -r '.[] | "\(.number):\(.title)"' 2>/dev/null)
  
  if [[ -n "$issue_list" ]]; then
    local -a issues_array
    while IFS= read -r line; do
      if [[ -n "$line" ]]; then
        issues_array+=("$line")
      fi
    done <<< "$issue_list"
    
    _describe 'issues' issues_array
  fi
}

# Function to complete labels
_issue_labels() {
  local labels
  local label_list
  
  # Check if we're in a git repository and have gh CLI available
  if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    return 1
  fi
  
  if ! command -v gh >/dev/null 2>&1; then
    return 1
  fi
  
  # Get available labels from the repository
  label_list=$(gh label list --json name 2>/dev/null | \
    jq -r '.[].name' 2>/dev/null)
  
  if [[ -n "$label_list" ]]; then
    local -a labels_array
    while IFS= read -r line; do
      if [[ -n "$line" ]]; then
        labels_array+=("$line")
      fi
    done <<< "$label_list"
    
    _describe 'labels' labels_array
  fi
}

# Main completion function
_issue "$@"

