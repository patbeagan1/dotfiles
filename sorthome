#/bin/bash

#===================================================
dumpdir="$HOME/Downloads/"
myhomedir="$HOME/Downloads/MyHome/"

while [[ $# -gt 0 ]]
do
  key="$1"

  case $key in
    --local)
      dumpdir="`pwd`"
      myhomedir="`pwd`/MyHome"
      shift # past argument
      ;;
    *)
      shift;
      ;;
  esac
done

dumpdir+="/"
myhomedir+="/"
#===================================================

echo `date`
echo "Cleaning up the $dumpdir folder..."
if [ ! -d "$myhomedir" ]; then mkdir "$myhomedir"; fi

#===================================================
function chkmk {
  cd "$myhomedir"
  if [ ! -d "$1" ]; then
    echo Creating "$1";
    mkdir "$1";
  else
    echo Visiting "$1";
  fi
}
function movefiles {
  chkmk "$1"
  cd "$dumpdir"
  declare -a temp=("${!2}")
  for i in "${temp[@]}"; do

    # grabbing all the files in the current directory, putting them into array
    files=()
    while IFS= read -d $'\0' -r file ; do
      files=("${files[@]}" "$file")
    done < <(find . -maxdepth 1 -name "*$i" ! -path "./MyHome" ! -path '.'  -print0)

    # I was running into problems when moving a large number of files
    # the official docs just said to run mv in batches to get over the glob rescrictions
    local stepSize=100
    for ((i=0; i<${#files[*]}; i+=$stepSize)); do
      if [ ${#files[*]} -gt $stepSize ]; then
        echo Batch "$i"
      fi
      if [ "$(uname -s)" = "Darwin" ]; then
        gmv --backup=numbered  "${files[@]:i:100}" "$myhomedir""$1";
      else
        mv --backup=numbered  "${files[@]:i:100}" "$myhomedir""$1";
      fi
    done
  done
  cd -
}

#===================================================
# /bin for executables and source code.
code=(".py" ".pyc" ".pyo")
code+=( ".c" ".cpp" ".out")
code+=( ".hs" )
code+=(".java" ".class" ".kt" ".ks" ".kts" ".jar")
code+=(".sh" ".pl" ".scpt" ".applescript")
movefiles bin code[@]

#===================================================
# /etc: Config files, like which are commonly found in /etc on the machine
config=(".cf" ".pem" ".crt" ".key" ".conf" ".rc");
movefiles etc config[@]

#===================================================
# Creating the /var directory, for files which are intended to change a lot
chkmk var

log=(".log")
movefiles var/log log[@]

db=(".db" ".db3" ".sqlite" ".sqlite3" ".index")
movefiles var/db db[@]

#===================================================
# /med is where the vast majority of the content is going to end up.
# files here are sorted accoording to their extensions.
chkmk med

graphics=(".png" ".PNG" ".gif" ".GIF" ".JPG" ".jpg" ".jpeg" ".svg")
movefiles med/pic graphics[@]

txt=(".txt" ".TXT" ".pdf" ".odt" ".doc" ".docx" ".rtf" ".ppt" ".pptx" ".xls" ".xlsx")
movefiles med/text txt[@]

web=(".html" ".htm" ".mhtml" ".js" ".json" ".css" ".csv" )
movefiles med/html web[@]

audio=(".flac" ".mp3" ".wav" ".mid" ".ogg");
movefiles med/audio audio[@]

video=(".mp4" ".avi" ".wmv" ".mov" ".mkv" ".webm" ".swf")
movefiles med/video video[@]

links=(".url")
movefiles med/bookmarks links[@]

emu=(".gbc" ".gba" ".sav" ".fds" ".gb" ".nes" ".ngc" ".ngp" ".rom" ".smc" ".srm" ".tgc" ".z64" ".bin")
movefiles med/emu emu[@]

#===================================================
# /BIG is for things that shouldn't be backed up, since they are too large
chkmk BIG

ops=(".iso" ".img")
movefiles BIG/OS ops[@]

zip=(".zip" ".gz" ".tgz" ".tar" ".bz2" ".xz" ".ZIP" ".rar")
movefiles BIG/zip zip[@]

packages=(".rpm" ".deb" ".dmg" ".msi" ".dpkg")
movefiles BIG/packages packages[@]

comics=(".cbz" ".cbr")
movefiles BIG/comics comics[@]

#===================================================
# /mnt and /tmp are convenience directories
## /mnt tends to be useful for integration with `tmsu`, while tmp is for
chkmk mnt
chkmk tmp

#===================================================
# /misc is for things that shoudn't go elsewhere - check here for folders, since they can't be sorted automatically.
mis=("")
movefiles misc mis[@]

#===================================================
#=========Cleaning up individual files==============
#===================================================

# Sometimes downloading audio clips from facebook relabels them with 2 exts
for file in $myhomedir/med/audio/*.mp3.mp3; do
  mv -- "$file" "${file%.mp3}" 2>/dev/null
done

# Sometimes downloading audio clips from FB makes them jpgs
for file in $myhomedir/med/pics/audioclip-*; do
  mv -- "$file" $myhomedir/misc 2>/dev/null
done

# It turns out that syntax coloring on shell files is really useful
#for file in $myhomedir/bin/*.sh; do
#mv -- "$file" $(echo "$file" | sed 's/.sh//') 2>/dev/null
#done

## Optional zipping of old files
## in practice, this is more trouble than it's worth.
#for i in $myhomedir/med/pic; do
#	d=`date | sed 's/ /-/g'`
#	mkdir -p $i/old/$d
#	find $i -maxdepth 1 -type f -mtime +60 -exec mv {} $i/old/$d \;
#        cd $i/old/$d
#	if [ ! `find . -prune -empty -type d` ]; then
#		zip ../$d.zip * && rm *
#	fi
#done



# Comickifying old photo galleries automatically is also more trouble than it's worth, since they can be large.
#for i in $myhomedir/med/pic/old/*; do
#	mv $i $(echo $i | sed 's/.zip/.cbz/g') 2>/dev/null
#done

# Removing empty directories in med
find $myhomedir/med -type d -empty -prune -exec rmdir {} \;

#===================================================
echo "Done cleaning. If a file appears lost, check Misc."
