#!/bin/bash
# Authored by PBeagan
# This is a collection of some of the more useful scripts I've created or found
# as long as they can be represented in less than 80col, no point in a full file
# still want as functions so args can be passed to them
# They are presented in this form to simplify importing into another system

#TO USE:
#if you type "source libbeagan" into a bash terminal, all of these functions will be available to you.

lastlog(){
    cd /var/log; less $(ls -1t | head -1)
}

rederr () 
{ 
        "$@" 2>&1 1>&3 | sed "s,.*,\033[31m&\e[0m," 1>&2
} 3>&1

notabs(){
    if [ $# -lt 2 ]; then 
        echo "Usage: notabs <file> <num spaces to use>"
    else
        n=""
        for i in $(seq 1 $2); do n+=" "; done
        sed "s/	/$n/g" $1
    fi
}

binlink(){
    ln -s $(pwd)/$1 /usr/local/bin/$1
}

checkcrlf(){
	dos2unix < "$1" | cmp -s - "$1"
}

#logs the time of the command
alias tc="timeclock"
alias lunch="tc lunch"
timeclock() {
    printf "%s\t|%s\n" "$1" "`date`" >> ~/timeclock.log
}

#creates a system message. Useful for scripts.
get_sysmessage () {
    if [ -z $Category ]; then Category="Undefined"; fi
    #creates a message which includes all the below information,
    #which is inserted into the start of the message body.

    echo "
    Category: $Category
    Machine:  $(hostname)
    Script:   $0
    Date:     $(date)
    "
}

#lists all of the currently defined functions
lsfuncs() {
    echo $(set | grep \(\) | grep -v =) | sed s/\(\)//g | sed s/\ \ /\ /g
}

#diffs all of the files in the current directory against each other
diffall() {
    for i in *; do for j in *; do echo === $i \|\| $j; diff $i $j; done; done
}

#svn wrapper to add in the addall functionality
svn() {
    if [[ "$@" == "add all" ]] || [[ "$@" == "addall" ]]; then
        command svn add $(svn st | grep ? | sed s"/\?//")
    elif [[ "$@" == "rm all" ]] || [[ "$@" == "rmall" ]]; then
        command svn rm $(svn st | grep ! | sed s"/\!//")
    elif [[ "$@" == "log" ]]; then
        command svn log | less
    else
        command svn "$@"
    fi
}

#record the local history
rec() {
    history > ~/Downloads/"$(echo "history-`date`.log" | sed s/\ /_/g)"
}

#list all the daemons on the system
lsdaemons () {
    ps -eo 'tty,pid,comm' | grep ^?
}

#destroys those pesky dsstore files.
destroy_dsstore_global () {
    sudo find / -name ".DS_Store" -depth -exec echo {} \;;
}

destroy_dsstore_local  () {
    find . -name .DS_Store -exec drop {} \;;
}

#jumps to the applicable part of the bash man file, for builtins
manbash() {
    man -P "less '+/^ *'${1}" bash;
}

#java compile and run, for if you want to quick compile. Also see bsh.
jj () {
    javac ${1}; java $(echo ${1} | sed s/\.java// );
}

#looks up the proposed term on the terminal version of wikipedia
wiki () {
    lynx -accept_all_cookies http://en.wikipedia.org/wiki/Special:Search?search=$(echo $@ | sed 's/ /+/g');
}

#installs homebrew on an OSX system
install-homebrew () {
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)";
}

#lists installed programs by size on a debian system
list-installed () {
    dpkg-query -Wf '${Installed-size}\t${Package}\n' | column -t | sort -n;
}

#prints out the most commonly used commands in your hist file
most_used () {
    story | awk '{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] " " CMD[a]/count*100 "% " a;}' |\
    grep -v "./" | column -c3 -s " " -t | sort -nr | nl |  head -n10;
}

#highlights the grepped contents of a file while still printing the whole doc
hl () {
    grep --color -i -E "$1|$" "$2";
}

#shows the stripped filetypes of everything in the directory
filetype () {
    file * | sed s/,.*// ;
}

#zips a directory of images into comic form
comic ()    {
    zip -r $1.zip $1; mv $1.zip $1.cbz;
}

#shorthand for what is in the directories immediately below, better than ls *
peek ()     {
    tree -L 2;
}

#perform the same action every 0.5 seconds
loop ()     {
    while :; do $*; sleep 0.5; if [ $1 == "-c" ]; then clear; fi; done;
}

#use for delaying input, as in the movies
echo_delay () {
    shift; echo "$@" | pv -qL 10;
}

list-users () {
    cut -d: -f1 /etc/passwd
}

#edit the last file. This can only be done if you have not cd'd since editing
alias el="editlast"
editlast () {
    vi $(find . -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d" ");
}

#prints out the contents of multiple files side by side, for when diff just can't cut it
compare () {
    printf "\t%s\n" "$@";
    pr -w $(tput cols) -m -t $@;
}

#serve up the contents of the current directory on localhost:8
serve_directory () {
    python -m SimpleHTTPServer;
}

#python -m smtpd -n -c DebuggingServer localhost:1025
#mplayer -ao pcm -vo null -vc dummy -dumpaudio -dumpfile <output-file> <input-file>

#interprets arithmetic operations
math () { 
    echo "$*" | bc -l;
}

#i="8uyxVmdaJ-w";mplayer -fs $(curl -s "http://www.youtube.com/get_video_info?&video_id=$i" | echo -e $(sed 's/%/\\x/g;s/.*\(v[0-9]\.lscache.*\)/http:\/\/\1/g') | grep -oP '^[^|,]*')

#dumps all of the characters in memory
dump-mem () {
    sudo dd if=/dev/mem | cat | strings;
}

#renames everything in the current directory to one without spaces
nospaces () {
    rename 'y/ /_/' *;
}

#curl ifconfig.me
#curl -u username:password --silent "https://mail.google.com/mail/feed/atom" | tr -d '\n' | awk -F '<entry>' '{for (i=2; i<=NF; i++) {print $i}}' | sed -n "s/<title>\(.*\)<\/title.*name>\(.*\)<\/name>.*/\2 - \1/p"

#show process ancestry
psp () {
    ps awwfux | less -S;
}

#mount a cd
mountcd () {
    mount /path/to/file.iso /mnt/cdrom -oloop;
}

#shows the relative writespeed of the computer
speedtest () {
    dd if=/dev/zero of=/dev/null bs=1M count=32768;
}

#pull down a youtube video to local disk
#get-video () { wget http://www.youtube.com/watch?v=dQw4w9WgXcQ -qO- | sed -n "/fmt_url_map/{s/[\'\"\|]/\n/g;p}" | sed -n '/^fmt_url_map/,/videoplayback/p' | sed -e :a -e '$q;N;5,$D;ba' | tr -d '\n' | sed -e 's/\(.*\),\(.\)\{1,3\}/\1/' | wget -i - -O surprise.flv; }

#edit google docs from the command line
#gdoc-edit () { google docs edit --title "To-Do List" --editor vim; }

#show what has changed in process over 10 seconds
ps-diff () {
    diff <(lsof -p $1) <(sleep 10; lsof -p $1);
}

#looks up the word in the dictionary
dictionary () {
    curl dict://dict.org/d:$1;
}

#check the ssl cert dates on a site
ssl-cert-date () {
    echo | openssl s_client -connect $1:443 2>/dev/null |openssl x509 -dates -noout;
}

#extract the audio from a youtube url
get-youtube-audio () {
    youtube-dl -t --extract-audio --audio-format mp3 $1;
}

#locate a usb by inserting or removing it within the 3 sec window
get-usb () {
    diff <(lsusb) <(sleep 3s && lsusb);
}

#press any key to continue
get-continue () {
    read -sn 1 -p "Press any key to continue...";
}

#find instances of brute force attacks
discover-brute-force () {
    sudo zcat /var/log/auth.log.*.gz | awk '/Failed password/&&!/for invalid user/{a[$9]++}/Failed password for invalid user/{a["*" $11]++}END{for (i in a) printf "%6s\t%s\n", a[i], i|"sort -n"}';
}

#display numbers like in the matrix
show-matrix () {
    echo -e "\e[32m";
    while :; do
        for i in {1..16}; do
            r="$(($RANDOM % 2))";
            if [[ $(($RANDOM % 5)) == 1 ]]; then
                if [[ $(($RANDOM % 4)) == 1 ]]; then
                    v+="\e[1m $r   ";
                else v+="\e[2m $r   ";
                fi; else
                v+="     ";
            fi;
        done;
        echo -e "$v"; v="";
    done;
}

#remote copy using compression
#ssh user@host "tar -zcf - /path/to/dir" > dir.tar.gz

#stderr in color
#mycommand 2> >(while read line; do echo -e "\e[01;31m$line\e[0m"; done)

#show dd progress
#sudo dd if=/dev/sdc bs=4096 | pv -s 2G | sudo dd bs=4096 of=~/USB_BLACK_BACKUP.IMG

#weather
weather () {
    curl http://wttr.in/Boston;
}

#time prompt
tp () {
    PS1='\[\e]0;\w\a\]\n\[\e[00;33m\][\d \A \[\e[01;35m\]\w\[\e[00;33m\]]\[\e[0m\]$(__git_ps1 " \[\033[1;32m\](%s)\[\033[0m\]") $(__awsenv_ps1)\n\$ ';
}

killport () {
    sudo kill $(sudo lsof -t -i:$1)
}

#lists the users on the system
list_users() { cut -d: -f1 /etc/passwd; }

#realtime report of common system info
report () {
    loop "clear; df; echo; w; echo; ps -e -o pcpu -o ruser -o args|sort -nr|grep -v %CPU|head -1; sleep 5"
}

#show how all the given arguments are parsed
argnum () {
    printf "%d args:" $#
    printf " <%s>" "$@"
    echo
}

#show the man page for if. It's a pain.
manif () {
    lynx http://tldp.org/LDP/abs/html/comparison-ops.html;
}
